[1m============================= test session starts ==============================[0m
platform linux -- Python 3.10.6, pytest-6.2.5, py-1.10.0, pluggy-0.13.0
cachedir: /home/chotu/ros2_ws/src/ENPM_808X_FINAL/build/ros2_aruco/.pytest_cache
rootdir: /home/chotu/ros2_ws/src/ENPM_808X_FINAL/ros2_aruco
plugins: launch-testing-ros-0.19.3, ament-copyright-0.12.4, launch-testing-1.0.3, ament-flake8-0.12.4, ament-lint-0.12.4, ament-pep257-0.12.4, ament-xmllint-0.12.4, colcon-core-0.11.0
[1mcollecting ... [0m[1m
collected 3 items                                                              [0m

test/test_copyright.py [31mF[0m[31m                                                 [ 33%][0m
test/test_flake8.py [31mF[0m[31m                                                    [ 66%][0m
test/test_pep257.py [31mF[0m[31m                                                    [100%][0m

=================================== FAILURES ===================================
[31m[1m________________________________ test_copyright ________________________________[0m
[1m[31mtest/test_copyright.py[0m:23: in test_copyright
    [94massert[39;49;00m rc == [94m0[39;49;00m, [33m'[39;49;00m[33mFound errors[39;49;00m[33m'[39;49;00m
[1m[31mE   AssertionError: Found errors[0m
[1m[31mE   assert 1 == 0[0m
----------------------------- Captured stderr call -----------------------------
launch/usb_camera_node.launch.py: could not find copyright notice
ros2_aruco/aruco_generate_marker.py: could not find copyright notice
ros2_aruco/aruco_node.py: could not find copyright notice
ros2_aruco/transformations.py: could not find copyright notice
4 errors, checked 8 files
[31m[1m_________________________________ test_flake8 __________________________________[0m
[1m[31mtest/test_flake8.py[0m:23: in test_flake8
    [94massert[39;49;00m rc == [94m0[39;49;00m, [33m'[39;49;00m[33mFound errors[39;49;00m[33m'[39;49;00m
[1m[31mE   AssertionError: Found errors[0m
[1m[31mE   assert 1 == 0[0m
----------------------------- Captured stdout call -----------------------------

./ros2_aruco/transformations.py:59:31: W605 invalid escape sequence '\*'
"""Homogeneous Transformation Matrices and Quaternions.

A library for calculating 4x4 matrices for translating, rotating, reflecting,
scaling, shearing, projecting, orthogonalizing, and superimposing arrays of
3D homogeneous coordinates as well as for converting between rotation matrices,
Euler angles, and quaternions. Also includes an Arcball control object and
functions to decompose transformation matrices.

:Authors:
  `Christoph Gohlke <http://www.lfd.uci.edu/~gohlke/>`__,
  Laboratory for Fluorescence Dynamics, University of California, Irvine

:Version: 20090418

Requirements
------------

* `Python 2.6 <http://www.python.org>`__
* `Numpy 1.3 <http://numpy.scipy.org>`__
* `transformations.c 20090418 <http://www.lfd.uci.edu/~gohlke/>`__
  (optional implementation of some functions in C)

Notes
-----

Matrices (M) can be inverted using numpy.linalg.inv(M), concatenated using
numpy.dot(M0, M1), or used to transform homogeneous coordinates (v) using
numpy.dot(M, v) for shape (4, \*) "point of arrays", respectively
numpy.dot(v, M.T) for shape (\*, 4) "array of points".

Calculations are carried out with numpy.float64 precision.

This Python implementation is not optimized for speed.

Vector, point, quaternion, and matrix function arguments are expected to be
"array like", i.e. tuple, list, or numpy arrays.

Return types are numpy arrays unless specified otherwise.

Angles are in radians unless specified otherwise.

Quaternions ix+jy+kz+w are represented as [x, y, z, w].

Use the transpose of transformation matrices for OpenGL glMultMatrixd().

A triple of Euler angles can be applied/interpreted in 24 ways, which can
be specified using a 4 character string or encoded 4-tuple:

  *Axes 4-string*: e.g. 'sxyz' or 'ryxy'

  - first character : rotations are applied to 's'tatic or 'r'otating frame
  - remaining characters : successive rotation axis 'x', 'y', or 'z'

  *Axes 4-tuple*: e.g. (0, 0, 0, 0) or (1, 1, 1, 1)

  - inner axis: code of axis ('x':0, 'y':1, 'z':2) of rightmost matrix.
  - parity : even (0) if inner axis 'x' is followed by 'y', 'y' is followed
    by 'z', or 'z' is followed by 'x'. Otherwise odd (1).
  - repetition : first and last axis are same (1) or different (0).
  - frame : rotations are applied to static (0) or rotating (1) frame.

References
----------

(1)  Matrices and transformations. Ronald Goldman.
     In "Graphics Gems I", pp 472-475. Morgan Kaufmann, 1990.
(2)  More matrices and transformations: shear and pseudo-perspective.
     Ronald Goldman. In "Graphics Gems II", pp 320-323. Morgan Kaufmann, 1991.
(3)  Decomposing a matrix into simple transformations. Spencer Thomas.
     In "Graphics Gems II", pp 320-323. Morgan Kaufmann, 1991.
(4)  Recovering the data from the transformation matrix. Ronald Goldman.
     In "Graphics Gems II", pp 324-331. Morgan Kaufmann, 1991.
(5)  Euler angle conversion. Ken Shoemake.
     In "Graphics Gems IV", pp 222-229. Morgan Kaufmann, 1994.
(6)  Arcball rotation control. Ken Shoemake.
     In "Graphics Gems IV", pp 175-192. Morgan Kaufmann, 1994.
(7)  Representing attitude: Euler angles, unit quaternions, and rotation
     vectors. James Diebel. 2006.
(8)  A discussion of the solution for the best rotation to relate two sets
     of vectors. W Kabsch. Acta Cryst. 1978. A34, 827-828.
(9)  Closed-form solution of absolute orientation using unit quaternions.
     BKP Horn. J Opt Soc Am A. 1987. 4(4), 629-642.
(10) Quaternions. Ken Shoemake.
     http://www.sfu.ca/~jwa3/cmpt461/files/quatut.pdf
(11) From quaternion to matrix and back. JMP van Waveren. 2005.
     http://www.intel.com/cd/ids/developer/asmo-na/eng/293748.htm
(12) Uniform random rotations. Ken Shoemake.
     In "Graphics Gems III", pp 124-132. Morgan Kaufmann, 1992.


Examples
--------

>>> alpha, beta, gamma = 0.123, -1.234, 2.345
>>> origin, xaxis, yaxis, zaxis = (0, 0, 0), (1, 0, 0), (0, 1, 0), (0, 0, 1)
>>> I = identity_matrix()
>>> Rx = rotation_matrix(alpha, xaxis)
>>> Ry = rotation_matrix(beta, yaxis)
>>> Rz = rotation_matrix(gamma, zaxis)
>>> R = concatenate_matrices(Rx, Ry, Rz)
>>> euler = euler_from_matrix(R, 'rxyz')
>>> numpy.allclose([alpha, beta, gamma], euler)
True
>>> Re = euler_matrix(alpha, beta, gamma, 'rxyz')
>>> is_same_transform(R, Re)
True
>>> al, be, ga = euler_from_matrix(Re, 'rxyz')
>>> is_same_transform(Re, euler_matrix(al, be, ga, 'rxyz'))
True
>>> qx = quaternion_about_axis(alpha, xaxis)
>>> qy = quaternion_about_axis(beta, yaxis)
>>> qz = quaternion_about_axis(gamma, zaxis)
>>> q = quaternion_multiply(qx, qy)
>>> q = quaternion_multiply(q, qz)
>>> Rq = quaternion_matrix(q)
>>> is_same_transform(R, Rq)
True
>>> S = scale_matrix(1.23, origin)
>>> T = translation_matrix((1, 2, 3))
>>> Z = shear_matrix(beta, xaxis, origin, zaxis)
>>> R = random_rotation_matrix(numpy.random.rand(3))
>>> M = concatenate_matrices(T, R, Z, S)
>>> scale, shear, angles, trans, persp = decompose_matrix(M)
>>> numpy.allclose(scale, 1.23)
True
>>> numpy.allclose(trans, (1, 2, 3))
True
>>> numpy.allclose(shear, (0, math.tan(beta), 0))
True
>>> is_same_transform(R, euler_matrix(axes='sxyz', *angles))
True
>>> M1 = compose_matrix(scale, shear, angles, trans, persp)
>>> is_same_transform(M, M1)
True

"""
                              ^

./ros2_aruco/transformations.py:60:30: W605 invalid escape sequence '\*'
"""Homogeneous Transformation Matrices and Quaternions.

A library for calculating 4x4 matrices for translating, rotating, reflecting,
scaling, shearing, projecting, orthogonalizing, and superimposing arrays of
3D homogeneous coordinates as well as for converting between rotation matrices,
Euler angles, and quaternions. Also includes an Arcball control object and
functions to decompose transformation matrices.

:Authors:
  `Christoph Gohlke <http://www.lfd.uci.edu/~gohlke/>`__,
  Laboratory for Fluorescence Dynamics, University of California, Irvine

:Version: 20090418

Requirements
------------

* `Python 2.6 <http://www.python.org>`__
* `Numpy 1.3 <http://numpy.scipy.org>`__
* `transformations.c 20090418 <http://www.lfd.uci.edu/~gohlke/>`__
  (optional implementation of some functions in C)

Notes
-----

Matrices (M) can be inverted using numpy.linalg.inv(M), concatenated using
numpy.dot(M0, M1), or used to transform homogeneous coordinates (v) using
numpy.dot(M, v) for shape (4, \*) "point of arrays", respectively
numpy.dot(v, M.T) for shape (\*, 4) "array of points".

Calculations are carried out with numpy.float64 precision.

This Python implementation is not optimized for speed.

Vector, point, quaternion, and matrix function arguments are expected to be
"array like", i.e. tuple, list, or numpy arrays.

Return types are numpy arrays unless specified otherwise.

Angles are in radians unless specified otherwise.

Quaternions ix+jy+kz+w are represented as [x, y, z, w].

Use the transpose of transformation matrices for OpenGL glMultMatrixd().

A triple of Euler angles can be applied/interpreted in 24 ways, which can
be specified using a 4 character string or encoded 4-tuple:

  *Axes 4-string*: e.g. 'sxyz' or 'ryxy'

  - first character : rotations are applied to 's'tatic or 'r'otating frame
  - remaining characters : successive rotation axis 'x', 'y', or 'z'

  *Axes 4-tuple*: e.g. (0, 0, 0, 0) or (1, 1, 1, 1)

  - inner axis: code of axis ('x':0, 'y':1, 'z':2) of rightmost matrix.
  - parity : even (0) if inner axis 'x' is followed by 'y', 'y' is followed
    by 'z', or 'z' is followed by 'x'. Otherwise odd (1).
  - repetition : first and last axis are same (1) or different (0).
  - frame : rotations are applied to static (0) or rotating (1) frame.

References
----------

(1)  Matrices and transformations. Ronald Goldman.
     In "Graphics Gems I", pp 472-475. Morgan Kaufmann, 1990.
(2)  More matrices and transformations: shear and pseudo-perspective.
     Ronald Goldman. In "Graphics Gems II", pp 320-323. Morgan Kaufmann, 1991.
(3)  Decomposing a matrix into simple transformations. Spencer Thomas.
     In "Graphics Gems II", pp 320-323. Morgan Kaufmann, 1991.
(4)  Recovering the data from the transformation matrix. Ronald Goldman.
     In "Graphics Gems II", pp 324-331. Morgan Kaufmann, 1991.
(5)  Euler angle conversion. Ken Shoemake.
     In "Graphics Gems IV", pp 222-229. Morgan Kaufmann, 1994.
(6)  Arcball rotation control. Ken Shoemake.
     In "Graphics Gems IV", pp 175-192. Morgan Kaufmann, 1994.
(7)  Representing attitude: Euler angles, unit quaternions, and rotation
     vectors. James Diebel. 2006.
(8)  A discussion of the solution for the best rotation to relate two sets
     of vectors. W Kabsch. Acta Cryst. 1978. A34, 827-828.
(9)  Closed-form solution of absolute orientation using unit quaternions.
     BKP Horn. J Opt Soc Am A. 1987. 4(4), 629-642.
(10) Quaternions. Ken Shoemake.
     http://www.sfu.ca/~jwa3/cmpt461/files/quatut.pdf
(11) From quaternion to matrix and back. JMP van Waveren. 2005.
     http://www.intel.com/cd/ids/developer/asmo-na/eng/293748.htm
(12) Uniform random rotations. Ken Shoemake.
     In "Graphics Gems III", pp 124-132. Morgan Kaufmann, 1992.


Examples
--------

>>> alpha, beta, gamma = 0.123, -1.234, 2.345
>>> origin, xaxis, yaxis, zaxis = (0, 0, 0), (1, 0, 0), (0, 1, 0), (0, 0, 1)
>>> I = identity_matrix()
>>> Rx = rotation_matrix(alpha, xaxis)
>>> Ry = rotation_matrix(beta, yaxis)
>>> Rz = rotation_matrix(gamma, zaxis)
>>> R = concatenate_matrices(Rx, Ry, Rz)
>>> euler = euler_from_matrix(R, 'rxyz')
>>> numpy.allclose([alpha, beta, gamma], euler)
True
>>> Re = euler_matrix(alpha, beta, gamma, 'rxyz')
>>> is_same_transform(R, Re)
True
>>> al, be, ga = euler_from_matrix(Re, 'rxyz')
>>> is_same_transform(Re, euler_matrix(al, be, ga, 'rxyz'))
True
>>> qx = quaternion_about_axis(alpha, xaxis)
>>> qy = quaternion_about_axis(beta, yaxis)
>>> qz = quaternion_about_axis(gamma, zaxis)
>>> q = quaternion_multiply(qx, qy)
>>> q = quaternion_multiply(q, qz)
>>> Rq = quaternion_matrix(q)
>>> is_same_transform(R, Rq)
True
>>> S = scale_matrix(1.23, origin)
>>> T = translation_matrix((1, 2, 3))
>>> Z = shear_matrix(beta, xaxis, origin, zaxis)
>>> R = random_rotation_matrix(numpy.random.rand(3))
>>> M = concatenate_matrices(T, R, Z, S)
>>> scale, shear, angles, trans, persp = decompose_matrix(M)
>>> numpy.allclose(scale, 1.23)
True
>>> numpy.allclose(trans, (1, 2, 3))
True
>>> numpy.allclose(shear, (0, math.tan(beta), 0))
True
>>> is_same_transform(R, euler_matrix(axes='sxyz', *angles))
True
>>> M1 = compose_matrix(scale, shear, angles, trans, persp)
>>> is_same_transform(M, M1)
True

"""
                             ^

./ros2_aruco/transformations.py:680:9: E741 ambiguous variable name 'l'
        l = vector_norm(n)
        ^

./ros2_aruco/transformations.py:778:9: E265 block comment should start with '# '
        #angles[0] = math.atan2(row[1, 0], row[1, 1])
        ^

./ros2_aruco/transformations.py:869:29: W605 invalid escape sequence '\*'
    """Return matrix to transform given vector set into second vector set.

    v0 and v1 are shape (3, \*) or (4, \*) arrays of at least 3 vectors.

    If usesvd is True, the weighted sum of squared deviations (RMSD) is
    minimized according to the algorithm by W. Kabsch [8]. Otherwise the
    quaternion based algorithm by B. Horn [9] is used (slower when using
    this Python implementation).

    The returned matrix performs rotation, translation and uniform scaling
    (if specified).

    >>> v0 = numpy.random.rand(3, 10)
    >>> M = superimposition_matrix(v0, v0)
    >>> numpy.allclose(M, numpy.identity(4))
    True
    >>> R = random_rotation_matrix(numpy.random.random(3))
    >>> v0 = ((1,0,0), (0,1,0), (0,0,1), (1,1,1))
    >>> v1 = numpy.dot(R, v0)
    >>> M = superimposition_matrix(v0, v1)
    >>> numpy.allclose(v1, numpy.dot(M, v0))
    True
    >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20.0
    >>> v0[3] = 1.0
    >>> v1 = numpy.dot(R, v0)
    >>> M = superimposition_matrix(v0, v1)
    >>> numpy.allclose(v1, numpy.dot(M, v0))
    True
    >>> S = scale_matrix(random.random())
    >>> T = translation_matrix(numpy.random.random(3)-0.5)
    >>> M = concatenate_matrices(T, R, S)
    >>> v1 = numpy.dot(M, v0)
    >>> v0[:3] += numpy.random.normal(0.0, 1e-9, 300).reshape(3, -1)
    >>> M = superimposition_matrix(v0, v1, scaling=True)
    >>> numpy.allclose(v1, numpy.dot(M, v0))
    True
    >>> M = superimposition_matrix(v0, v1, scaling=True, usesvd=False)
    >>> numpy.allclose(v1, numpy.dot(M, v0))
    True
    >>> v = numpy.empty((4, 100, 3), dtype=numpy.float64)
    >>> v[:, :, 0] = v0
    >>> M = superimposition_matrix(v0, v1, scaling=True, usesvd=False)
    >>> numpy.allclose(v1, numpy.dot(M, v[:, :, 0]))
    True

    """
                            ^

./ros2_aruco/transformations.py:869:40: W605 invalid escape sequence '\*'
    """Return matrix to transform given vector set into second vector set.

    v0 and v1 are shape (3, \*) or (4, \*) arrays of at least 3 vectors.

    If usesvd is True, the weighted sum of squared deviations (RMSD) is
    minimized according to the algorithm by W. Kabsch [8]. Otherwise the
    quaternion based algorithm by B. Horn [9] is used (slower when using
    this Python implementation).

    The returned matrix performs rotation, translation and uniform scaling
    (if specified).

    >>> v0 = numpy.random.rand(3, 10)
    >>> M = superimposition_matrix(v0, v0)
    >>> numpy.allclose(M, numpy.identity(4))
    True
    >>> R = random_rotation_matrix(numpy.random.random(3))
    >>> v0 = ((1,0,0), (0,1,0), (0,0,1), (1,1,1))
    >>> v1 = numpy.dot(R, v0)
    >>> M = superimposition_matrix(v0, v1)
    >>> numpy.allclose(v1, numpy.dot(M, v0))
    True
    >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20.0
    >>> v0[3] = 1.0
    >>> v1 = numpy.dot(R, v0)
    >>> M = superimposition_matrix(v0, v1)
    >>> numpy.allclose(v1, numpy.dot(M, v0))
    True
    >>> S = scale_matrix(random.random())
    >>> T = translation_matrix(numpy.random.random(3)-0.5)
    >>> M = concatenate_matrices(T, R, S)
    >>> v1 = numpy.dot(M, v0)
    >>> v0[:3] += numpy.random.normal(0.0, 1e-9, 300).reshape(3, -1)
    >>> M = superimposition_matrix(v0, v1, scaling=True)
    >>> numpy.allclose(v1, numpy.dot(M, v0))
    True
    >>> M = superimposition_matrix(v0, v1, scaling=True, usesvd=False)
    >>> numpy.allclose(v1, numpy.dot(M, v0))
    True
    >>> v = numpy.empty((4, 100, 3), dtype=numpy.float64)
    >>> v[:, :, 0] = v0
    >>> M = superimposition_matrix(v0, v1, scaling=True, usesvd=False)
    >>> numpy.allclose(v1, numpy.dot(M, v[:, :, 0]))
    True

    """
                                       ^

./ros2_aruco/transformations.py:1429:37: E712 comparison to True should be 'if cond is True:' or 'if cond:'
        self._constrain = constrain == True
                                    ^

./ros2_aruco/aruco_node.py:66:36: E721 do not compare types, use 'isinstance()'
            if type(dictionary_id) != type(cv2.aruco.DICT_5X5_100):
                                   ^

./ros2_aruco/aruco_node.py:118:1: W293 blank line contains whitespace
            
^

./ros2_aruco/aruco_node.py:119:1: W293 blank line contains whitespace
            
^

./ros2_aruco/aruco_node.py:120:9: E303 too many blank lines (2)
        markers.header.stamp = img_msg.header.stamp
        ^

./ros2_aruco/aruco_node.py:130:100: E501 line too long (107 > 99 characters)
                                                                      self.marker_size, self.intrinsic_mat,
                                                                                                   ^

./ros2_aruco/aruco_node.py:134:100: E501 line too long (104 > 99 characters)
                                                                   self.marker_size, self.intrinsic_mat,
[33m=============================== warnings summary ===============================[0m
test/test_flake8.py::test_flake8
test/test_flake8.py::test_flake8
  Warning: SelectableGroups dict interface is deprecated. Use select.

test/test_pep257.py: 25 warnings
  Warning: invalid escape sequence '\*'

-- Docs: https://docs.pytest.org/en/stable/warnings.html
                                                                                                   ^

./launch/usb_camera_node.launch.py:6:1: F401 'launch.LaunchContext' imported but unused
from launch import LaunchContext
^

./launch/usb_camera_node.launch.py:7:1: F401 'launch.actions.SetEnvironmentVariable' imported but unused
from launch.actions import SetEnvironmentVariable
^

./launch/usb_camera_node.launch.py:11:1: E303 too many blank lines (3)
def generate_launch_description():
^

./launch/usb_camera_node.launch.py:12:19: W291 trailing whitespace
    ns = "/camera" 
                  ^

./launch/usb_camera_node.launch.py:19:100: E501 line too long (107 > 99 characters)
            parameters=[{"camera_calibration_file": "file:///home/spragunr/.ros/camera_info/camera.yaml"}],
                                                                                                   ^

./launch/usb_camera_node.launch.py:27:27: E231 missing whitespace after ','
            arguments=["0","0","0","0","0","0","world","camera"],
                          ^

./launch/usb_camera_node.launch.py:27:31: E231 missing whitespace after ','
            arguments=["0","0","0","0","0","0","world","camera"],
                              ^

./launch/usb_camera_node.launch.py:27:35: E231 missing whitespace after ','
            arguments=["0","0","0","0","0","0","world","camera"],
                                  ^

./launch/usb_camera_node.launch.py:27:39: E231 missing whitespace after ','
            arguments=["0","0","0","0","0","0","world","camera"],
                                      ^

./launch/usb_camera_node.launch.py:27:43: E231 missing whitespace after ','
            arguments=["0","0","0","0","0","0","world","camera"],
                                          ^

./launch/usb_camera_node.launch.py:27:47: E231 missing whitespace after ','
            arguments=["0","0","0","0","0","0","world","camera"],
                                              ^

./launch/usb_camera_node.launch.py:27:55: E231 missing whitespace after ','
            arguments=["0","0","0","0","0","0","world","camera"],
                                                      ^

./launch/usb_camera_node.launch.py:32:1: W293 blank line contains whitespace
    
^

7     E231 missing whitespace after ','
1     E265 block comment should start with '# '
2     E303 too many blank lines (3)
3     E501 line too long (107 > 99 characters)
1     E712 comparison to True should be 'if cond is True:' or 'if cond:'
1     E721 do not compare types, use 'isinstance()'
1     E741 ambiguous variable name 'l'
2     F401 'launch.LaunchContext' imported but unused
1     W291 trailing whitespace
3     W293 blank line contains whitespace
4     W605 invalid escape sequence '\*'

9 files checked
26 errors

'E'-type errors: 16
'F'-type errors: 2
'W'-type errors: 8

Checked files:

* ./setup.py
* ./ros2_aruco/__init__.py
* ./ros2_aruco/aruco_generate_marker.py
* ./ros2_aruco/transformations.py
* ./ros2_aruco/aruco_node.py
* ./launch/usb_camera_node.launch.py
* ./test/test_flake8.py
* ./test/test_pep257.py
* ./test/test_copyright.py
----------------------------- Captured stderr call -----------------------------
option --max-complexity: please update from optparse string `type=` to argparse callable `type=` -- this will be an error in the future
[31m[1m_________________________________ test_pep257 __________________________________[0m
[1m[31mtest/test_pep257.py[0m:23: in test_pep257
    [94massert[39;49;00m rc == [94m0[39;49;00m, [33m'[39;49;00m[33mFound code style errors / warnings[39;49;00m[33m'[39;49;00m
[1m[31mE   AssertionError: Found code style errors / warnings[0m
[1m[31mE   assert 1 == 0[0m
----------------------------- Captured stdout call -----------------------------
checking ./launch/usb_camera_node.launch.py
checking ./ros2_aruco/__init__.py
checking ./ros2_aruco/aruco_generate_marker.py
./ros2_aruco/aruco_generate_marker.py:15 in public class `CustomFormatter`: D204: 1 blank line required after class docstring (found 0)
./ros2_aruco/aruco_generate_marker.py:15 in public class `CustomFormatter`: D210: No whitespaces allowed surrounding docstring text
checking ./ros2_aruco/aruco_node.py
./ros2_aruco/aruco_node.py:1 at module level: D407: Missing dashed underline after section ('Parameters')
./ros2_aruco/aruco_node.py:1 at module level: D406: Section name should end with a newline ('Parameters', not 'Parameters:')
checking ./ros2_aruco/transformations.py
./ros2_aruco/transformations.py:32 at module level: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:32 at module level: D301: Use r""" if any backslashes in a docstring
./ros2_aruco/transformations.py:32 at module level: D412: No blank lines allowed between a section header and its content ('Notes')
./ros2_aruco/transformations.py:32 at module level: D412: No blank lines allowed between a section header and its content ('References')
./ros2_aruco/transformations.py:32 at module level: D412: No blank lines allowed between a section header and its content ('Examples')
./ros2_aruco/transformations.py:181 in public function `identity_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:196 in public function `translation_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:209 in public function `translation_from_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:221 in public function `reflection_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:247 in public function `reflection_from_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:276 in public function `rotation_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:320 in public function `rotation_from_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:360 in public function `scale_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:397 in public function `scale_from_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:439 in public function `projection_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:500 in public function `projection_from_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:573 in public function `clip_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:625 in public function `shear_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:656 in public function `shear_from_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:701 in public function `decompose_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:787 in public function `compose_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:839 in public function `orthogonalization_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:867 in public function `superimposition_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:867 in public function `superimposition_matrix`: D301: Use r""" if any backslashes in a docstring
./ros2_aruco/transformations.py:969 in public function `euler_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1032 in public function `euler_from_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1090 in public function `euler_from_quaternion`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1101 in public function `quaternion_from_euler`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1158 in public function `quaternion_about_axis`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1175 in public function `quaternion_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1197 in public function `quaternion_from_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1229 in public function `quaternion_multiply`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1246 in public function `quaternion_conjugate`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1259 in public function `quaternion_inverse`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1271 in public function `quaternion_slerp`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1312 in public function `random_quaternion`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1342 in public function `random_rotation_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1357 in public class `Arcball`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1381 in public method `__init__`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1408 in public method `place`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1537 in public function `vector_norm`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1576 in public function `unit_vector`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1620 in public function `random_vector`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1635 in public function `inverse_matrix`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1651 in public function `concatenate_matrices`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1667 in public function `is_same_transform`: D213: Multi-line docstring summary should start at the second line
./ros2_aruco/transformations.py:1683 in private function `_import_module`: D213: Multi-line docstring summary should start at the second line
checking ./setup.py
checking ./test/test_copyright.py
checking ./test/test_flake8.py
checking ./test/test_pep257.py
checking test/test_copyright.py
checking test/test_flake8.py
checking test/test_pep257.py
51 errors
- generated xml file: /home/chotu/ros2_ws/src/ENPM_808X_FINAL/build/ros2_aruco/pytest.xml -
=========================== short test summary info ============================
FAILED test/test_copyright.py::test_copyright - AssertionError: Found errors
FAILED test/test_flake8.py::test_flake8 - AssertionError: Found errors
FAILED test/test_pep257.py::test_pep257 - AssertionError: Found code style er...
[31m======================== [31m[1m3 failed[0m, [33m27 warnings[0m[31m in 0.50s[0m[31m ========================[0m
